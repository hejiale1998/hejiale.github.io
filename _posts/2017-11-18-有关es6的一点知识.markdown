---
layout:     post
title:      "es6的一点知识"
subtitle:   ""
date:       2017-11-18 16:15
author:     "hjl"
header-img: "img/post-bg-2015.jpg"
tags:
    - 知识
---


> It never will rain roses. When we want to have more roses we must plant trees。

> 关于let、const、块级作用域以及解构赋值  


**let声明变量** 
<br />
不存在变量声明提升（也就不能在声明前使用该变量），<br />
不能重复声明变量，<br />
与var相比把变量的作用域限制在块级<br />

**const声明变量**<br />
const一旦声明常量的值就不能更改,<br />
声明一个常量必须马上初始化,<br />
和let一样，不能重复声明，<br />
对于引用类型变量 变量名不指向数据，而是指向数据所在的地址<br /> 
```{bash}.
const foo = {}; 
（1）foo.prop = 123;    //可以，对象内部属性值都是可以变得但是引用的地址不能变
（2）foo = {};     //Uncaught TypeError: Assignment to constant variable.
```
<br />

**块级作用域** 
<br />
什么是块级作用域呢？
<br />
任何一对花括号( {} )中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。
<br />
特点 
<br />
let声明变量 声明周期为块级作用域内(里面能用外面，外面不能用里面);
一旦let在作用域中声明变量 就将统治这个作用域
```{bash}.
var a = 1;
{
    console.log(a);
    let a = 2;
 }       //会报错
```
<br />
优势
<br />
(1).可以代替匿名函数
```{bash}.
    var oDiv = document.getElementsByTagName('div');
    // for(var i = 0; i < oDiv.length; i ++) {
    //     (function (i) {
    //         oDiv[i].onclick = function () {
    //             console.log(i);
    //         }
    //     }(i))
    // }
    for(let i = 0; i < oDiv.length; i ++) {
            oDiv[i].onclick = function () {
                console.log(i);
            }
    }     
```
<br />
(2).防止变量污染
<br />
**解构赋值**
<br />
 ES6允许按照一定模式，从数组和对象中提取，对（var let const）变量进行赋值，这被称为解构。<br />
 (1)、模式匹配  const [a, b ,c] = [1, 2, 3];   //解构赋值必须模式匹配，如左边是数组右边不能是原始值<br />
 (2)、解构失败   就是undefined-->右面的值少<br />    //var [bar,foo2] = [1];<br />
 (3)、不完全解构   -->右面的值多<br />    //let [x,y] = [1,2,3];<br />
 <br />
 默认赋值（只有右侧的值严格等于undefined才生效）    
 <br />
 //var [foo = true] = [];
 <br />
 默认赋值可以应用解构赋值的其他变量<br />
 首先看右侧有无和左侧对应的值，没有的话看左侧从左到右解析<br />
  let [x4 = y4, y4 = 1] = [];   //会报错，y4 is not defined<br />
  let [x2 = 1, y2 = x2] = [2];   //2 2<br />
  <br />
 对象的解构赋值
 <br />
![](/img/decon.png)
<br />
要注意 将一个已经声明的变量用于解构赋值时必须非常小心<br />
        js引擎会将{x} 理解成一个代码块，从而发生语法错误。只有不将大括号写在行首可以避免这个问题<br />
        var x; <br />
        {x} = {x:1};       //Uncaught SyntaxError     <br /> 
        ({x} = {x:1});<br />
        console.log(x);<br />
 字符串的解构赋值--- >字符串会转化成一个类数组的对象<br />
 const [a,b,c,d,e] = 'hello';  <br />
 console.log(a,b,c,d,e);    //hello  <br />
<br />
用途
<br />
（1）交换变量
<br />以前交换变量的方法是利用两个变量的和或者利用一个中间变量，现在直接
<br />        var x = 1;
<br />        var y = 2;
<br />        [x, y] = [y, x];       
<br />        console.log(x, y);
<br />就可以实现
<br />（2）.从函数返回多个值
<br />        function demo () {
<br />            return [1,2,3];
<br />        }       
<br />        var [a, b, c] = demo();
(3).函数参数的定义
<br /> function demo1 ({x,y,z}) {
<br />            console.log(x,y,z);
<br />        }        
<br />        demo1({z:3,x:2,y:1});

<br />
> 今天就先到这里咯
